### YamlMime:Tutorial
title: "Criar máquinas virtuais com o Azure PowerShell"
metadata:
  title: "Criar máquinas virtuais com o Azure PowerShell"
  description: "Comece com o Azure PowerShell com a criação de máquinas virtuais."
  audience: Developer
  level: Beginner
  displayType: two-column
  interactive: azurepowershell
  ms.date: 02/08/2018
  ms.author: sewhee
  author: sdwheeler
  manager: carmonm
  ms.devlang: azure-powershell
  ms.technology: azure
  ms.openlocfilehash: bb5024927da7888dca406a522fa39dfe225afb89
  ms.sourcegitcommit: 20af779cd523c758d40e23d60eb989a4ef982d5c
  ms.translationtype: HT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 03/15/2018
items:
- durationInMinutes: 1
  content: "Neste tutorial, você aprenderá todas as etapas envolvidas na configuração de uma máquina virtual com o Azure PowerShell. O tutorial também abrange consultas de saída, a reutilização de recursos do Azure e a limpeza de recursos.\n\nEste tutorial pode ser concluído com a experiência interativa oferecida por meio do Azure Cloud Shell ou você pode [instalar o Azure PowerShell](install-azurerm-ps.md) localmente.\n\nUse __ctrl-shift-v__ (__cmd-shift-v__ no macOS) para colar o texto do tutorial no Azure Cloud Shell."
- durationInMinutes: 1
  title: Fazer logon
  content: "Caso esteja usando uma instalação local do Azure PowerShell, faça logon antes de executar qualquer outra etapa.\n\n```powershell\nLogin-AzureRmAccount\n```\n\nConclua o processo de logon seguindo as etapas exibidas em seu terminal."
- durationInMinutes: 1
  title: Criar um grupo de recursos
  content: "No Azure, todos os recursos são alocados em um grupo de gerenciamento de recursos. Os grupos de recursos fornecem agrupamentos lógicos de recursos que os tornam mais fáceis de trabalhar como uma coleção.\nPara este tutorial, todos os recursos criados entram em um único grupo chamado `TutorialResources`.\n\n```powershell\nNew-AzureRmResourceGroup -Name TutorialResources -Location eastus\n```\n\n```Output\nResourceGroupName : TutorialResources\nLocation          : eastus\nProvisioningState : Succeeded\nTags              :\nResourceId        : /subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/resourceGroups/TutorialResources\n```"
- durationInMinutes: 1
  title: Criar credenciais de administrador para a VM
  content: "Antes de criar uma nova máquina virtual, você deve criar um objeto de credencial que contenha o nome de usuário e a senha da conta Administrador da VM do Windows.\n\n```powershell\n$cred = Get-Credential -Message \"Enter a username and password for the virtual machine.\"\n```\n\nInsira o nome do usuário e a senha quando solicitado. O objeto de credencial resultante é passado como um parâmetro na próxima etapa.\n\n```Output\nWindows PowerShell credential request.\nEnter a username and password for the virtual machine.\nUser: tutorAdmin\nPassword for user tutorAdmin: *********\n```"
- durationInMinutes: 4
  title: "Criar uma máquina virtual"
  content: "As máquinas virtuais no Azure têm um grande número de dependências. O Azure PowerShell cria esses recursos com base nos argumentos de linha de comando especificados por você. Para facilitar a leitura, estamos usando [nivelamento do PowerShell](/powershell/module/microsoft.powershell.core/about/about_splatting) para passar parâmetros aos cmdlets do Azure PowerShell.\n\nCrie uma nova máquina virtual executando Windows.\n\n```powershell\n$vmParams = @{\n  ResourceGroupName = 'TutorialResources'\n  Name = 'TutorialVM1'\n  Location = 'eastus'\n  ImageName = 'Win2016Datacenter'\n  PublicIpAddressName = 'tutorialPublicIp'\n  Credential = $cred\n  OpenPorts = 3389\n}\n$newVM1 = New-AzureRmVM @vmParams\n```\nAssim que a VM é criada, você vê os valores de parâmetro locais utilizados e os recursos do Azure sendo criados.\nO PowerShell substituirá uma barra de progresso conforme mostrado abaixo.\n\n```Output\n Creating Azure resources\n  39% \\\n  [ooooooooooooooooooooooooooooooooooo                                                                 ]\n\n  Creating TutorialVM1 virtual machine.\n```\n\nAssim que a VM estiver pronta, podemos exibir os resultados no Portal do Azure ou inspecionando a variável \\$newVM1.\n\n```powershell\n$newVM1\n```\n\n```Output\nResourceGroupName : TutorialResources\nId                : /subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/resourceGroups/TutorialResources/providers/Microsoft.Compute/virtualMachines/TutorialVM1\nVmId              : 12345678-9abc-def0-1234-56789abcedf0\nName              : TutorialVM1\nType              : Microsoft.Compute/virtualMachines\nLocation          : eastus\nTags              : {}\nHardwareProfile   : {VmSize}\nNetworkProfile    : {NetworkInterfaces}\nOSProfile         : {ComputerName, AdminUsername, WindowsConfiguration, Secrets}\nProvisioningState : Succeeded\nStorageProfile    : {ImageReference, OsDisk, DataDisks}\n```\n\nOs valores de propriedade listados dentro de chaves são objetos aninhados. Na próxima etapa, vamos mostrar como exibir valores específicos nesses objetos aninhados."
- durationInMinutes: 5
  title: "Obter informações de VM com consultas"
  content: "Vamos obter algumas informações mais detalhadas sobre a VM que acabamos de criar. Neste exemplo, podemos verificar o Nome da VM e a conta de administrador que criamos.\n\n```powershell\n$newVM1.OSProfile | Select-Object ComputerName,AdminUserName\n```\n\n```Output\nComputerName AdminUsername\n------------ -------------\nTutorialVM1  tutorialAdmin\n```\n\nPodemos usar outros comandos do Azure PowerShell para obter informações específicas sobre a configuração de rede.\n\n```powershell\n$newVM1 | Get-AzureRmNetworkInterface |\n  Select-Object -ExpandProperty IpConfigurations |\n    Select-Object Name,PrivateIpAddress\n```\n\nNeste exemplo, estamos usando o pipeline do PowerShell para enviar o objeto \\$newVM1 para o cmdlet `Get-AzureRmNetworkInterface`. Do objeto do adaptador de rede resultante, estamos selecionando o objeto aninhado IpConfigurations. Do objeto IpConfigurations, estamos selecionando as propriedades Nome e PrivateIpAddress.\n\n```Output\nName        PrivateIpAddress\n----        ----------------\nTutorialVM1 192.168.1.4\n```\n\nPara confirmar se a VM está em execução, precisamos nos conectar por meio da Área de Trabalho Remota. Para fazer isso, é preciso saber o endereço IP público.\n\n```powershell\n$publicIp = Get-AzureRmPublicIpAddress -Name tutorialPublicIp -ResourceGroupName TutorialResources\n\n$publicIp | Select-Object Name,IpAddress,@{label='FQDN';expression={$_.DnsSettings.Fqdn}}\n```\n\nNeste exemplo, usamos o `Get-AzureRmPublicIpAddress` e armazenamos os resultados na variável \\$publicIp. Dessa variável, estamos selecionando Propriedades e usando uma expressão para recuperar a propriedade aninhada Fqdn.\n\n```Output\nName             IpAddress           FQDN\n----             ---------           ----\ntutorialPublicIp <PUBLIC_IP_ADDRESS> tutorialvm1-8a0999.eastus.cloudapp.azure.com\n```\n\nEm seu computador local, você pode executar o comando a seguir para conectar-se à VM na Área de Trabalho Remota.\n\n```powershell\nmstsc.exe /v <PUBLIC_IP_ADDRESS>\n```\n\nPara obter mais informações sobre como consultar propriedades de objeto, confira [Consultando recursos do Azure](./queries-azureps.md)."
- durationInMinutes: 4
  title: Criando uma nova VM na sub-rede existente
  content: "A segunda VM usa a sub-rede existente.\n\n```powershell\n$vm2Params = @{\n  ResourceGroupName = 'TutorialResources'\n  Name = 'TutorialVM2'\n  ImageName = 'Win2016Datacenter'\n  VirtualNetworkName = 'TutorialVM1'\n  SubnetName = 'TutorialVM1'\n  PublicIpAddressName = 'tutorialPublicIp2'\n  Credential = $cred\n  OpenPorts = 3389\n}\n$newVM2 = New-AzureRmVM @vm2Params\n\n$newVM2\n```\n\n```Output\nResourceGroupName        : TutorialResources\nId                       : /subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/resourceGroups/TutorialResources/providers/Microsoft.Compute/virtualMachines/TutorialVM2\nVmId                     : 12345678-9abc-def0-1234-56789abcedf1\nName                     : TutorialVM2\nType                     : Microsoft.Compute/virtualMachines\nLocation                 : eastus\nTags                     : {}\nHardwareProfile          : {VmSize}\nNetworkProfile           : {NetworkInterfaces}\nOSProfile                : {ComputerName, AdminUsername, WindowsConfiguration, Secrets}\nProvisioningState        : Succeeded\nStorageProfile           : {ImageReference, OsDisk, DataDisks}\nFullyQualifiedDomainName : tutorialvm2-dfa5af.eastus.cloudapp.azure.com\n```\n\nÉ possível ignorar algumas etapas para obter o endereço IP público da nova VM, uma vez que ele é retornado na propriedade FullyQualifiedDomainName do objeto \\$newVM2. Use o seguinte comando para se conectar usando a Área de Trabalho Remota.\n\n```powershell\nmstsc.exe /v $newVM2.FullyQualifiedDomainName\n```"
- durationInMinutes: 4
  title: Limpeza
  content: "Agora que o tutorial está completo, é hora de limpar os recursos criados. É possível excluir recursos individuais com o comando `Remove-AzureRmResource`, mas a maneira mais segura de remover todos os recursos em um grupo de recursos é excluindo o grupo usando o comando `Remove-AzureRmResourceGroup`.\n\n```powershell\n$job = Remove-AzureRmResourceGroup -Name TutorialResources -Force -AsJob\n\n$job\n```\n\n```Output\nId     Name            PSJobTypeName   State         HasMoreData     Location             Command\n--     ----            -------------   -----         -----------     --------             -------\n1      Long Running... AzureLongRun... Running       True            localhost            Remove-AzureRmResource...\n```\n\nEsse comando exclui os recursos criados durante o tutorial e é garantido que eles serão desalocados na ordem correta. O parâmetro `-AsJob` evita o bloqueio do PowerShell enquanto ocorre a exclusão. Para aguardar até que a exclusão seja concluída, use o seguinte comando:\n\n```powershell\nWait-Job -Id $job.Id\n```\n\nCom a limpeza concluída, o tutorial está encerrado. Continue para obter um resumo de tudo o que você aprendeu e links para recursos que ajudarão nas próximas etapas."
- durationInMinutes: 1
  title: Resumo
  content: "\nParabéns! Você aprendeu a criar VMs com recursos novos ou existentes, usou expressões e outros comandos do Azure PowerShell para capturar dados a serem armazenados em variáveis do shell e analisou alguns dos recursos que são criados para VMs do Azure.\n\nO que você vai fazer a seguir depende de como você planeja usar o Azure PowerShell. Há uma variedade de materiais que se aprofundam nos recursos abordados neste tutorial.\n\n### <a name=\"in-depth-azure-powershell-documentation\"></a>Documentação detalhada do Azure PowerShell\n\nTalvez você queira um tempo para explorar o conjunto completo da [documentação do Azure PowerShell](overview.md).\n\nPara obter mais informações sobre os comandos usados neste tutorial, consulte os artigos a seguir.\n\n- [New-AzureRmResourceGroup](/powershell/module/azurerm.resources/new-azurermresourcegroup)\n- [Get-Credential](/powershell/module/microsoft.powershell.security/get-credential)\n- [New-AzureRmVM](/powershell/module/azurerm.compute/new-azurermvm)\n- [Select-Object](/powershell/module/microsoft.powershell.utility/select-object)\n- [Get-AzureRmPublicIpAddress](/powershell/module/azurerm.network/get-AzureRmPublicIpAddress)\n- [Remove-AzureRmResourceGroup](/powershell/module/azurerm.resources/Remove-AzureRmResourceGroup)\n- [Wait-Job](/powershell/module/microsoft.powershell.core/wait-job)\n\nTambém há artigos que se aprofundam nos recursos que foram mostrados no tutorial.\n\n- [Nivelamento do PowerShell](/powershell/module/microsoft.powershell.core/about/about_splatting)\n- [Consultas](queries-azureps.md)\n- [Formatação](formatting-output.md)\n- [Usando tarefas do PowerShell](using-psjobs.md)\n\n### <a name=\"sample-scripts\"></a>Exemplos de scripts\n\nSe você quiser iniciar imediatamente com tarefas específicas, examine alguns scripts de exemplo.\n\n- [Máquinas Virtuais do Linux](/azure/virtual-machines/linux/powershell-samples?toc=%2fpowershell%2fmodule%2ftoc.json)\n- [Máquinas Virtuais do Windows](/azure/virtual-machines/windows/powershell-samples?toc=%2fpowershell%2fmodule%2ftoc.json)\n- [Aplicativos Web](/azure/app-service-web/app-service-powershell-samples?toc=%2fpowershell%2fmodule%2ftoc.json)\n- [Bancos de dados SQL](/azure/sql-database/sql-database-powershell-samples?toc=%2fpowershell%2fmodule%2ftoc.json)\n- [Cosmos DB](/azure/cosmos-db/powershell-samples?toc=%2fpowershell%2fmodules%2ftoc.json)\n\n### <a name=\"feedback\"></a>Comentários\n\nCaso queira enviar comentários, sugestões ou perguntas, há várias maneiras de entrar em contato.\n\n* `Send-Feedback` é um comando interno do Azure PowerShell que permite enviar comentários de formato livre para a equipe.\n* Arquive uma solicitação de recurso ou um relatório de bugs no [repositório do Azure PowerShell](https://github.com/Azure/azure-powershell/issues).\n* Faça uma pergunta ou obtenha esclarecimentos preenchendo um formulário de problemas no [repositório de documentação do Azure PowerShell](https://github.com/Azure/azure-docs-powershell/issues).\n\nEsperamos que você aproveite o Azure PowerShell!"
